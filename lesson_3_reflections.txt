When would you want to use a remote repository rather than keeping all your 
work local?

-When you are using other machines: whether it be collaboration or using 
another of your own in a different location.

Why might you want to always pull changes manually rather than having Git 
automatically stay up-to-date with your remote repository?

-You want to manually control the updates to your remote since you may not 
always have your program ready for the public with each commit.

Describe the differences between forks, clones, and branches.  When would you 
use one instead of another?

-Forks: only from github to github.  Use when you want to make changes to 
someone else's repository and keep for your own.
-Clones: full repository copies, can be made local to local or github to local. 
Can be used to make changes to a repository on a local machine.
-Branches: only on a single repository.  Used to make a change to a repository, 
and to isolate all changes in case you want to restore the original or it can 
be used when multiple collaborators are working on features to the same 
repository.

What is the benefit of having a copy of the last known state of the remote 
stored locally?

-The benefit is to make updates without having to be connected to the internet 
and to see if any updates have been pushed to the remote that you may not be 
aware of.

How would you collaborate without using Git or GitHub?  What would be easier, 
and what would be harder?

-Every time a file has been added or modified, I would updated the master file 
and keep a copy of the modified file and save as the name and date of last 
update to that file.  This would be much harder to keep track of.  The changes 
that are made may have to be manually found or found using whatever editor 
I am using to view and edit the file.  It would be harder to keep track of 
changes without git log.  Generally, the process would be less organized.

When would you want to make changes in a separate branch rather than directly 
in master?  What benefits does each approach have?

-It would probably be best to make changes to a new branch every time you add 
a new feature or want to try anything new in general.  Merges to the master 
are so easily done that it wouldn't make sense not to; especially in 
collaboration.  This way chanages can be easily distinguished and are pre-
labeled.
-Changes made directly to the master take away the possibility of local merge 
conflicts, which makes things a bit simpler.


